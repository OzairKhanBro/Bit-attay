2
4 3
2 2
2 3
4 1
2 3
2 1
2 2
2 3




















#include <iostream>
//#include <map>
#include <set>
#include <fstream>
using namespace std;
bool path(int* set, int& count, int y,int row,int& max)
{
	if (count > max)
		max = count;
	if (count == row)
		return 1;
	bool tem = false;
	if (set[count+1, 2] != 1)
	{
		count++;
		if(path(set, count, 2, row,max)) return 1;
		count--;
	}
	if (y!=3 && set[count + 1, 1] != 1)
	{
		count ++ ;
		if(path(set, count , 1, row,max)) return 1;
		count--;
	}
	if (y!=1 && set[count + 1, 3]!= 1)
	{
		count++;
		if(path(set, count, 3, row,max)) return 1;
		count--;
	}
	return false;
}
void main()
{
	ifstream ifs;
	ifs.open("inp.txt");
	//set<pair<int, int>> set;
	int *set;
	int tcase, row, obs;
	ifs >> tcase;
	for (int j = 0; j < tcase; j++)
	{
		ifs >> row >> obs;
		int x, y;
		set = new int[(row * 3)+3];
		for (int i = 0; i < obs; i++)
		{
			ifs >> x>> y;
			set[x+y]=1;
		}
		int count = 1,max=1;
		path(set, count, 2, row,max);
		//for (int k = 1; k<= row; k++)
		//{
		//	/*else
		//	{

		//	}*/
		//}
		cout << max << "\n";
		delete[]set;
	}
}





#include <iostream>
using namespace std;
int main()
{
int *set;
	int tcase, row, obs;
	cin >> tcase;
	for (int j = 0; j < tcase; j++)
	{
		cin >> row >> obs;
		int x, y;
		set = new int[(row * 3) + 6];
		for (int i = 0; i < obs; i++)
		{
			cin >> x >> y;
			x--;y--;
			set[(x*3) + y] = 1;
		}
	int count = 1, max = 1;
		y = 1;
		for (int k = 1; k< row; k++)
		{
			if (set[(count)* 3 + 1] != 1)
			{
				count++;y = 1;
			}
			else if (y != 0 && set[(count)* 3 + 2] != 1)
			{
				count++;y = 2;
			}
			else if (y != 2 && set[(count)* 3 + 0] != 1)
			{
				count++;y = 0;
			}
			else break;
			
		}
		cout << count << "\n";
		
	}
	return 0;
}





#include <iostream>
//#include <map>
#include <set>
#include <fstream>
using namespace std;
bool path(int* set, int& count, int y, int row, int& max)
{
	if (count > max)
		max = count;
	if (count == row)
		return 1;
	bool tem = false;
	if (set[(count)*3 + 1] != 1)
	{
		count++;
		if (path(set, count, 1, row, max)) return 1;
		count--;
	}
	if (y != 3 && set[(count) * 3 + 0] != 1)
	{
		count++;
		if (path(set, count, 0, row, max)) return 1;
		count--;
	}
	if (y != 1 && set[(count) * 3 + 2] != 1)
	{
		count++;
		if (path(set, count, 2, row, max)) return 1;
		count--;
	}
	return false;
}
int main()
{
	ifstream ifs;
	ifs.open("inp.txt");
	//set<pair<int, int>> set;
	int *set;
	int tcase, row, obs;
	ifs >> tcase;
	for (int j = 0; j < tcase; j++)
	{
		ifs >> row >> obs;
		int x, y;
		set = new int[(row * 3) + 6];
		for (int i = 0; i < obs; i++)
		{
			ifs >> x >> y;
			x--;y--;
			set[(x*3) + y] = 1;
		}
		int count = 1, max = 1;
		//path(set, count, 2, row, max);
		y = 1;
		for (int k = 1; k< row; k++)
		{
			if (set[(count)* 3 + 1] != 1)
			{
				count++;y = 1;
			}
			else if (y != 3 && set[(count)* 3 + 0] != 1)
			{
				count++;y = 0;
			}
			else if (y != 1 && set[(count)* 3 + 2] != 1)
			{
				count++;y = 2;
			}
			else break;
		}
		cout << count << "\n";
		delete[]set;
	}
	return 0;
}
